@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap');

:root {
    --sidebar-bg: #2c3e50;
    --sidebar-text: #ecf0f1;
    --main-bg: #f4f7f6;
    --primary-color: #3498db;
    --primary-hover: #2980b9;
    --light-text: #bdc3c7;
    --error-color: #e74c3c;
}

* {
    box-sizing: border-box;
}

body {
    font-family: 'Noto Sans KR', sans-serif;
    margin: 0;
    background-color: var(--main-bg);
}

.container-fluid {
    display: flex;
    min-height: 100vh;
}

.sidebar {
    /* [수정 이유]
       - position: fixed; 속성은 스크롤과 상관없이
         항상 화면의 동일한 위치에 사이드바를 고정시키는 핵심 속성
       - 이 속성이 없으면 사이드바가 메인 콘텐츠와 함께 스크롤된다
    */
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh; /* 화면 전체 높이 */
    overflow-y: auto; /* 내용이 길어지면 사이드바만 스크롤 */

    width: 280px;
    background-color: var(--sidebar-bg);
    color: var(--sidebar-text);
    padding: 30px 25px;
    display: flex;
    flex-direction: column;
    /*flex-shrink: 0;*/
}

.logo {
    font-size: 24px;
    font-weight: 700;
    text-align: center;
    margin: 0 0 40px 0;
    color: white;
}

/* Login Form */
.login-form input {
    width: 100%;
    padding: 12px;
    margin-bottom: 12px;
    border: 1px solid #34495e;
    border-radius: 6px;
    background-color: #34495e;
    color: var(--sidebar-text);
    font-size: 15px;
}

.login-form input::placeholder {
    color: var(--light-text);
}

.login-form input:focus {
    outline: none;
    border-color: var(--primary-color);
}

.login-form button,
.register-btn,
.user-info button {
    width: 100%;
    padding: 12px;
    border: none;
    border-radius: 6px;
    background-color: var(--primary-color);
    color: white;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.3s;
}

.login-form button:hover,
.register-btn:hover,
.user-info button:hover {
    background-color: var(--primary-hover);
}

.error-message {
    color: var(--error-color);
    font-size: 13px;
    text-align: center;
    min-height: 20px;
    margin-bottom: 10px;
}

.sidebar-links {
    display: flex;
    justify-content: space-around;
    margin: 15px 0;
}

.sidebar-links a {
    color: var(--light-text);
    text-decoration: none;
    font-size: 13px;
    transition: color 0.3s;
}

.sidebar-links a:hover {
    color: white;
}

.register-btn {
    margin-top: 10px;
    background-color: transparent;
    border: 1px solid var(--primary-color);
}

/* User Info */
.user-info {
    text-align: center;
}

.user-info p {
    font-size: 16px;
    margin-bottom: 20px;
}

.user-info button {
    margin-bottom: 10px;
}

.user-info .logout-btn {
    background-color: #e74c3c;
}

.user-info .logout-btn:hover {
    background-color: #c0392b;
}

.main-content {
    /* [추가]
       - 사이드바가 fixed 되면서 일반적인 문서 흐름에서 벗어나 메인 콘텐츠 위로
         겹쳐지게 된다
       - 사이드바의 너비(width: 280px)만큼 왼쪽에 여백(margin-left)을 주어
         메인 콘텐츠가 가려지지 않고 제 위치에 표시되도록 한다.
    */
    margin-left: 280px;

    flex-grow: 1;
    padding: 30px;
    overflow-y: auto;
}

#react-root {
    width: 100%;
    height: 100%;
}

/* Profile Image Styles */
.user-info .profile-image {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
    margin-bottom: 10px;
    border: 2px solid #eee;
}

.user-info .default-image {
    background-color: #f0f0f0;
 /*   display: flex;
    justify-content: center;
    align-items: center;*/
    margin-bottom: 10px;
}

/* [추가]
  - 로그인 폼과 사용자 정보 블록이 하단에 위치하도록 만든다
  - `margin-top: auto`는 flex 아이템이 남은 수직 공간을 모두
    자신의 위쪽 여백으로 사용하게 만들어, 해당 요소를 컨테이너의 맨 아래로 밀어낸다.
*/

.login-form,
.user-info {
    margin-top: 0;
}

.main-nav {
    /* [수정] 기존 margin-top/bottom을 좀 더 명확한 간격으로 조정 */
    margin-top: 40px; /* 사용자 정보 영역과 메뉴 사이의 간격 */
    border-top: 1px solid #34495e; /* 구분선 추가 */
    padding-top: 20px; /* 구분선과 메뉴 사이의 간격 */
}

.main-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.main-nav li {
    margin-bottom: 8px; /* 메뉴 아이템 간의 수직 간격 */
}

/* [수정] a 태그가 아닌 button 태그에 스타일을 적용 */
.main-nav button {
    /* 버튼 기본 스타일 초기화 */
    background: none;
    border: none;
    padding: 0;
    font: inherit;
    color: inherit;
    cursor: pointer;
    outline: inherit;

    /* 커스텀 스타일 적용 */
    display: block;
    width: 100%;
    padding: 15px 20px;
    color: var(--light-text);
    text-decoration: none;
    text-align: left; /* 텍스트 왼쪽 정렬 */
    border-radius: 8px;
    transition: background-color 0.2s, color 0.2s;
    font-size: 16px;
}

.main-nav button:hover {
    background-color: #34495e;
    color: white;
}

/* [삭제] .active 클래스는 JavaScript로 동적 제어가 필요하며,
   Thymeleaf와 React가 분리된 현 구조에서는 구현이 복잡합니다.
   우선순위가 높은 기능이 아니므로 일단 제거하고, 필요 시 추후 구현을 논의 */
/*
.main-nav li a.active {
    background-color: var(--primary-color);
    color: white;
    font-weight: 700;
}
*/
